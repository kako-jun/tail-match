[tool.poetry]
name = "tail-match-scraper"
version = "0.1.0"
description = "Tail Match scraping system for Japanese municipal animal rescue sites"
authors = ["kako-jun"]
license = "MIT"
readme = "README.md"
packages = [{include = "tail_match_scraper", from = "."}]

[tool.poetry.dependencies]
python = "^3.11"
# Core scraping libraries
requests = "^2.31.0"
beautifulsoup4 = "^4.12.3"
lxml = "^5.1.0"

# Database connectivity
psycopg2-binary = "^2.9.9"

# HTML parsing and manipulation
html5lib = "^1.1"
selectolax = "^0.3.17"

# HTTP client enhancements
urllib3 = "^2.1.0"
requests-html = "^0.10.0"

# Async support (for future optimization)
aiohttp = "^3.9.3"
asyncio-throttle = "^1.0.2"

# Local content extraction (no external APIs)

# Utility libraries
python-dotenv = "^1.0.1"
dateparser = "^1.2.0"
phonenumbers = "^8.13.27"

# Logging and monitoring
structlog = "^24.1.0"

# Image processing (for future features)
Pillow = "^10.2.0"

# Text processing
textdistance = "^4.6.2"
fuzzywuzzy = "^0.18.0"

# Data validation
pydantic = "^2.5.3"

# Cron job management
schedule = "^1.2.0"

# Configuration management
PyYAML = "^6.0.1"

# Error tracking and monitoring
sentry-sdk = "^1.40.0"

[tool.poetry.group.dev.dependencies]
# Development and testing
pytest = "^8.0.0"
pytest-asyncio = "^0.23.4"
pytest-mock = "^3.12.0"
pytest-cov = "^4.0.0"

# Code quality
black = "^24.1.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"

# Documentation
sphinx = "^7.2.0"

[tool.poetry.scripts]
tail-match-scraper = "main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tail_match_scraper"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=. --cov-report=html --cov-report=term"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]